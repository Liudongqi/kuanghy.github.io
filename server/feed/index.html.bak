<?xml version="1.0" encoding="utf-8"?>
  <rss version="2.0"
        xmlns:content="http://purl.org/rss/1.0/modules/content/"
        xmlns:atom="http://www.w3.org/2005/Atom"
  >
  <channel>
    <title>Huoty's Blog</title>
    <link href="http://kuanghy.github.io/feed/" rel="self" />
    <link href="http://kuanghy.github.io" />
    <lastBuildDate>2015-05-08T21:04:47+08:00</lastBuildDate>
    <webMaster>sudohuoty@163.com</webMaster>
    
    <item>
      <title>你好，世界</title>
      <link href="http://kuanghy.github.io/hello-world/"/>
      <pubDate>2015-05-05T00:00:00+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/hello-world</guid>
      <content:encoded><![CDATA[<p>虽然毕业参加工作以来还不到一年的时间，但想想自己现在也已经是奔三的年纪。回想自己开始学编程时，已经18岁了。这岂不是远远的被别人落在了起跑线上。</p>

<p><img src="http://7xixhp.com1.z0.glb.clouddn.com/schw.jpg" alt="imge1" /></p>

<p>世界上的第一个程序是 <strong>Hello World</strong>。于是导致后来人在刚开始学习编程的时候，都以 <strong>Hello World</strong> 开篇。以下这个笑话估计只有接触过编程的人才能看懂：</p>

<blockquote><p>某程序员退休后决定练习书法，于是重金购买文房四宝。一日，饭后突生雅兴，一番研墨拟纸，并点上上好檀香。定神片刻，泼墨挥毫，郑重地写下一行字：hello world！</p></blockquote>

<p>我想，不懂编程的人是体会不到 <strong>Hello World</strong> 的伟大的。</p>

<p>我写的第一个程序是这个样子的：</p>

<div>
  <pre><code class='ruby'>// hello.c
#include &lt;stdio.h&gt;

int main(void)
{
  printf(&quot;Hello world!\n&quot;);
  
  return 0;
}</code></pre>
</div>


<p>接着是这样子的：</p>

<div>
  <pre><code class='cpp'>#include &lt;iostream&gt;

using namespace std;

int main(void)
{
    cout &lt;&lt; &quot;Hello world!&quot; &lt;&lt; endl;

    return 0;
}</code></pre>
</div>


<p>再接着是这样子的：</p>

<div>
  <pre><code class='python'>#! /usr/bin/env python
# -*- coding: utf-8 -*-

if __name__ == '__main__':
    print 'hello world'
    
# Script starts from here</code></pre>
</div>


<p>然后是这样子的</p>

<div>
  <pre><code class='html'>&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        &lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, XML, XHTML, JavaScript&quot;&gt;
        &lt;meta name=&quot;description&quot; content=&quot;Test on HTML and CSS&quot;&gt;
        &lt;meta name=&quot;author&quot; content=&quot;Huoty&quot;&gt;
        &lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;
        &lt;title&gt;Web 设计&lt;/title&gt;
        &lt;link rel=&quot;shortcut icon&quot; href=&quot;/htmls/images/favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello world!&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>


<p>再然后是这样子的：</p>

<div>
  <pre><code class='php'>&lt;?php  # Script -- php.php

/* 
 * 2015-05-05 12:49:49
 */

echo &quot;Hello World!&quot;;

?&gt;</code></pre>
</div>


<p>再再然后是这样子的：</p>

<div>
  <pre><code class='javascript'>&lt;script type=&quot;text/javascript&quot;&gt;
    function button_clicked()
    {
        alert(&quot;Hello world!&quot;);
    }
&lt;/script&gt;</code></pre>
</div>


<p>啊，搞得好像我满脑子都是 <strong>Hello World</strong> 似的。一下子罗列了不少的代码，就当我是在测试博客的代码语法效果吧。我不确定在以后的生涯中，我还会遇到多少的 <strong>Hello World</strong>，我只觉得见到它，我有一些莫名的感觉。写到这里，突然不知道该说什么了，我明明记得我有很多话要说的。想要搭建独立博客的心郁积了很久，现在终于舒了一口气，当然是应该好好抒发一下心情的。其实，当一切平静下来的时候，很多东西都不在重要了。</p>

<p>今天终于把博客的基本模型搭建完成，作为一名 <strong>Coder</strong>，第一篇文章也就用了 <strong>Hello World</strong> 开篇。</p>

<p>你好，世界！！！</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>LibAhead for iOS - 在未越狱设备上修改三方APP的功能</title>
      <link href="http://kuanghy.github.io/libahead/"/>
      <pubDate>2015-01-31T11:46:31+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/libahead</guid>
      <content:encoded><![CDATA[<p>折腾了两个晚上，已搞定在未越狱 iOS 上向第三方 APP 注入 dylib 模块的方案！</p>

<p>通过这个方案，使“微信去广告显IP删弧宠 for iOS ”成为可能（戏谑，但实现起来确实将比 Win32 下简单容易很多）。目前已实测在微信 iPhone 版中添加代码，强制开启“羊年春晚摇一摇”功能，不仅可以抢先体验提前穿越，还能随意控制原本随机摇出的各种功能（剧透：过年的时候微信摇一摇会有：新春红包、上传全家福到春晚、明信片、明星拜年、播放音乐、“甜蜜时光”、啥也没摇到、春晚节目单等功能：）。</p>

<p>思路和十多年前的 AheadLib for Win32 创意方案一样。决定和 AheadLib 一样，做个自动化生成代码的工具，名字都想好了，LibAhead for iOS。宇宙依然，但青年不再，所以拖拖拉拉是难免的，哈</p>

<p>针对特定 APP 写的 CydiaSubstrate dylib 模块，稍加处理即可集成到第三方 APP 里，并运行于未越狱的设备中。各种系统权限突破之类的还是老实点——干不了的；因为涉及修改 IPA 包，重新签名也是必须的。</p>

<p>后续再把细节和工具慢慢补上……</p>

<p>AppStore 之外（如蒲公英、同步推、快用、PP助手等）下载的 APP 都可能不是安全的——即使是未越狱的手机，基于以上功能完全可以在官方 APP 基础上做各种拦截和功能扩展。</p>

<p>2015.02.06 更新：扯淡了，根本不需要转发，直接修改 Mach-O Load Command 表，插入 dylib 然后重新签名即可搞定一切，自动化工具已完成，未广泛测试：https://github.com/Yonsm/iPAFine</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>分析 Substrate 的 THUMB 函数 Hook 实现细节</title>
      <link href="http://kuanghy.github.io/armhook/"/>
      <pubDate>2014-07-12T08:14:31+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/armhook</guid>
      <content:encoded><![CDATA[<p>ARM 架构的 CPU 有 ARM 和 THUMB 执行态。</p>

<h4>1. 先说 ARM 态（被Hook的函数）到 ARM 态（自己的替换函数）的 HOOK</h4>

<p>  非常简单，没有看过 Substrate 的时候我就想到并验证过了（8 个字节）：</p>

<pre><code>  LDR PC, [PC， #-4]
  replacedFunctionAddress  ; 目标绝对地址（ARM 态的，偶数）
</code></pre>

<h4>2. ARM 态到 THUMB 态的 HOOK</h4>

<p>  和上面应该应该类似，只是   变成 replacedFunctionAddress + 1，转跳后自动切换到 THUMB 态。</p>

<pre><code>  未验证（X！）
</code></pre>

<h4>3. THUMB 到 THUMB 态的 HOOK</h4>

<p>  难理解的来了，经过实际测试发现<strong>下面的代码可以 HOOK 任意的函数（包括未导出的私有函数）</strong>（注意，hookedFunctionAddress 如果是 THUMB 的，则需要 + 1——MD，在这栽了好长一段时间，感谢曾半仙）</p>

<pre><code>  _MSHookFunction(hookedFunctionAddress + 1, (void *)replacedFunctionAddress, (void **)&amp;pOriginalFunction); 
</code></pre>

<p>  用以上 Substrate 的方法实现 THUMB 到 THUMB 的 HOOK 之后，我用 GDB 查看了一下内存，总共修改了12个字节，如下：</p>

<pre><code>  (gdb) x/3xw _mh_execute_header+0x1073E0
  0x15e3e0 &lt;_mh_execute_header+1078240&gt;:    0x46c04778  0xe51ff004  0x0029b6b9  
</code></pre>

<p>  反汇编代码（注意 THUMB 模式的 disas 地址要 +1 变成奇数）：</p>

<pre><code>  (gdb) disas _mh_execute_header+0x1073E1 _mh_execute_header+0x1073EC
  Dump of assembler code from 0x15e3e1 to 0x15e3ec:
  0x0015e3e1 &lt;_mh_execute_header+1078241&gt;:  bx  pc
  0x0015e3e3 &lt;_mh_execute_header+1078243&gt;:  nop         (mov r8, r8) 
  0x0015e3e5 &lt;_mh_execute_header+1078245&gt;:  blx 0x562e24 ; 请忽略
  0x0015e3e9 &lt;_mh_execute_header+1078249&gt;:  undefined ; 请忽略
  0x0015e3eb &lt;_mh_execute_header+1078251&gt;:  lsls    r1, r5, #0 ; 请忽略
</code></pre>

<p>  第一条指令（C0 46）就是 THUMB 的 BX PC，第二条指令是 78 47 是 THUMB 的 NOP。后面的指令因为实际上是 BX 成 ARM 态了，所以请忽略。</p>

<p>  BX PC 后实际上是转跳到了 ARM 态的 0x0015e3e4 地址，继续反汇编如下：</p>

<pre><code>  (gdb) disas _mh_execute_header+0x1073E4 _mh_execute_header+0x1073EC
  Dump of assembler code from 0x15e3e4 to 0x15e3ec:
  0x0015e3e4 &lt;_mh_execute_header+1078244&gt;:  ldr pc, [pc, #-4]   ; 0x15e3e8 &lt;_mh_execute_header+1078248&gt;
  0x0015e3e8 &lt;_mh_execute_header+1078248&gt;:  strheq  r11, [r9], -r9 ; 这个就是和 replacedFunctionAddress + 1 了
</code></pre>

<p>  可以看到从 0x0015e3e4 这里开始和上面提到的第一种情况（从ARM到THUMB）一样了。</p>

<p>  补充：感谢 riusksk 做了一个直观图解，非常容易看明白：</p>

<p>  <img src="/assets/ThumbHook.png" alt="" /></p>

<h4>4. 从 THUMB 到 ARM</h4>

<pre><code>  你猜~~
</code></pre>

<h4>关于转跳</h4>

<pre><code>  * 如果操作数类型是imm, 那就是互换状态. ARM下到thumb, thumb下调用就到ARM；
  * 如果操作数是寄存器 根据低位地址，奇数为 THUMB，偶数为 ARM。
</code></pre>

<p>知道了上述 HOOK 方法，再构造一个 pOriginalFunction，结合 Inject Dylib 的方法，就可以自己实现 Substrate 的完整功能了。</p>

<p>（上面仅 3 是对 Substate 的 Hook 分析，其它是我 YY 的，不确定 Substrate 也是这样的实现，有兴趣的话可以自己反汇编/反编译 Substrate 去看实现细节）</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Re-Symbolicate iOS Crash Report</title>
      <link href="http://kuanghy.github.io/resymbolicate/"/>
      <pubDate>2014-06-25T01:31:42+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/resymbolicate</guid>
      <content:encoded><![CDATA[<p>Xcode Organizer 连接手机看 Device Logs 的时候，有个 Re-Symbolicate 功能可以根据地址反查 Call Stack 中系统模块（如UIKit、CoreFoundation等）的符号信息。</p>

<p>如果收到的是第三者设备提供过来的Crash Log，则无法使用该功能。使用以下命令可以实现同样的目的：</p>

<pre><code>  export DEVELOPER_DIR=/Applications/Xcode.app/Contents/Developer
  /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKitBase.framework/Versions/A/Resources/symbolicatecrash -v ~/CrashLog.crash
</code></pre>

<p>上面提到的是反查系统模块的符号，下面这个则是根据崩溃地址和dSYM来反查自己程序模块中的符号：</p>

<pre><code>dwarfdump --lookup 0x00002712 -arch armv7 CrashTesting.app.dSYM/
</code></pre>

<p>一旦从地址中反查到了符号，将非常有助于分析Crash的原因。</p>

<p>(2014.11.22 验证)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>那些年，曾经做过的汉化</title>
      <link href="http://kuanghy.github.io/hanzify/"/>
      <pubDate>2013-07-14T03:43:57+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/hanzify</guid>
      <content:encoded><![CDATA[<p>现在已经没有汉化习惯了，整个分类删除掉了，记录一下历史，部分软件可以从<a href="http://teach.hanzify.org/author/2520.html">汉化新世纪</a>下载：</p>

<p>xScope 2.5 汉化版 – 设计、测量、校准和检查屏幕图形和布局的辅助工具
2011-08-12</p>

<p>Araxis Merge 2011.4040 汉化版 – Mac 下好用的文件和文件夹比较工具
2011-08-09</p>

<p>Changes 1.5.6 汉化版 – Mac 下的比较工具
2011-08-09</p>

<p>MacDrive 8.0.5 简体中文汉化版
2010-05-07</p>

<p>Palringo 简体中文绿色版 – 多功能的 IM 软件
2009-05-20</p>

<p>IMPlus 5.67.1 汉化版
2009-04-26</p>

<p>SKTracker，分析比对PPC注册表和文件系统变化的好工具
2008-11-19</p>

<p>NewsBreak 2.1 汉化
2008-08-31</p>

<p>TaskMgr 3.1 汉化 – PPC 中强大的窗口进程等系统剖析工具
2008-08-31</p>

<p>PocketCalc 2.2.1 汉化版
2008-08-30</p>

<p>HiCalc 2.5.1- 功能最强大、界面最漂亮的计算器
2008-08-29</p>

<p>Resco Explorer 2008 7.0.5 完美汉化
2008-08-28</p>

<p>Virtual Drive Manager 1.3.1 汉化修正
2008-08-26</p>

<p>GPS Pack
2008-08-26</p>

<p>RESCO Explorer 2007 6.16 简体中文化版本
2007-10-13</p>

<p>Kevtris 2.0 – 最漂亮、最好玩的而罗斯方块
2007-04-12</p>

<p>PIEPlus 2.1 RC2 最完美汉化版 – PocketIE 增强工具
2006-08-17</p>

<p>WM5torage 1.7 汉化版 – 把 Windows Mobile 5.0 当优盘用
2006-08-17</p>

<p>Kevtris 1.1 汉化版- Windows Mobile 最好玩的俄罗斯方块
2006-04-04</p>

<p>GraphEdit – DirectShow Graph 图表工具
2005-09-03</p>

<p>Kevtris 1.0 汉化版- Smartphone上非常好玩的俄罗斯方块
2005-06-20</p>

<p>BetaPlayer 0.096/0.5 完整汉化版
2005-06-10</p>

<p>Resco System Toys 1.20 汉化补丁
2005-05-22</p>

<p>Resco Photo Viewer 5.20 汉化补丁
2005-05-22</p>

<p>Resco Explorer 2003 5.00 汉化补丁
2005-05-22</p>

<p>Dependency Walker 2.1.3790 汉化版
2005-03-13</p>

<p>ExamDiff Pro 3.3 汉化版
2005-02-22</p>

<p>SourceStyler C++ 汉化版</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>博客迁移到 Jekyll @ GitHub - 你也可以fork在GitHub建站哦</title>
      <link href="http://kuanghy.github.io/hello-jekyll/"/>
      <pubDate>2013-07-14T00:00:00+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/hello-jekyll</guid>
      <content:encoded><![CDATA[<p>在 Wopus 上的博客空间快到期了，我终于下决心迁移到 GitHub 上。好处就不多说了，看看<a href="http://www.besteric.com/2013/05/08/migrate-wordpress-to-jekyll/">别人怎么说 Jekyll @ GitHub</a>吧。</p>

<p>GitHub上找了个<a href="http://webfrogs.me/2012/12/20/use-jekyll/">模板</a>，花了一整天折腾修改，分类、链接、评论、附件等终于都完美了，搜索引擎优化、站内搜索等还没完成。如果需要可以在 <a href="http://www.github.com/Yonsm">GitHub</a> 上参考我的这个 <a href="http://www.github.com/Yonsm/NET">博客的完整代码</a>。</p>

<p>回看一下博客建立到现在快 9 年了，从刚开始的把博客当微博用，到中期的勤奋“耕耘”，再对比一下今年的7个月快过去了才 3 篇不像样的文章，今昔非比。这次迁移重新整理了博客，文章数目从 530 篇缩减到 250 篇。希望这次变换博客空间和引擎是个契机（好吧，是借口），接下来的时间里能多产出点东西。Idea 有很多，能不能出来就不知道了。</p>

<p>刚开始使用 Markdown 写东西，很不错。语法高亮可以使用 <a href="http://pygments.org/">Pygments</a> ，<a href="https://github.com/mojombo/jekyll/wiki/Liquid-Extensions">使用介绍在此</a>。例子效果如下：</p>

<div>
  <pre><code class='objc'>void FixWordPressExportedXML(NSString *src, NSString *dst)
{
    NSMutableString *data = [NSMutableString stringWithContentsOfFile:src encoding:NSUTF8StringEncoding error:nil];
    if (data)
    {
        for (NSInteger i = data.length - 1; i &gt;= 0; i--)
        {
            unichar c = [data characterAtIndex:i];
            if (c &lt; 0x20 &amp;&amp; c != 9 &amp;&amp; c != '\r' &amp;&amp; c != '\n')
            {
                [data replaceCharactersInRange:NSMakeRange(i, 1) withString:@&quot; &quot;];
            }
        }
        [data replaceOccurrencesOfString:@&quot;&amp;nbsp;&quot; withString:@&quot; &quot; options:nil range:NSMakeRange(0, data.length)];
        [data writeToFile:dst atomically:NO encoding:NSUTF8StringEncoding error:nil];
    }
}</code></pre>
</div>



]]></content:encoded>
    </item>
    
    <item>
      <title>[转载]如何制作自己的 Fusion Drive 硬盘</title>
      <link href="http://kuanghy.github.io/how-to-make-fusion-drive/"/>
      <pubDate>2013-01-14T21:19:01+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/how-to-make-fusion-drive</guid>
      <content:encoded><![CDATA[<p>Fusion Drive的性能号称能直追纯SSD，如果有2010年的27' iMac，或者2011 2012的iMac 21'/27'或者MacBook Pro替换光驱上128G SSD，弄成Fusion Drive 应该是一个非常不错的方案。直接上原文吧：<a href="http://appleuser.com/2012/11/30/fusiondrive/">http://appleuser.com/2012/11/30/fusiondrive/</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>劫持MLB.TV和WSJ Live和预告片，打造自己的Apple TV本地媒体浏览器</title>
      <link href="http://kuanghy.github.io/atvme/"/>
      <pubDate>2012-11-15T08:28:19+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/atvme</guid>
      <content:encoded><![CDATA[<h1>Apple TV Media Explorer</h1>

<ol>
<li><p>升级您的 AppleTV 到最新版本固件。</p></li>
<li><p>在设置中把区域改成香港（或美国），这样主页上你可以看到好些图标。</p></li>
<li><p>劫持DNS，有两种方法，请任选其一：
1).如果您的路由器支持DNSMasQ，可以在路由器上配置DNS劫持（192.168.1.9 换成你的 HTTP 服务器的 IP 地址，IP 地址仅举例，自行替换）：</p></li>
<li><p>address=/www.marketwatch.com/192.168.1.9</p></li>
<li>address=/trailers.apple.com/180.153.225.136</li>
</ol>


<p>第二行为劫持预告片到 TT 的服务器（大量在线视频内容），非必须，但强烈推荐。</p>

<p>2).如果你不会弄DNS服务器，可以用我提供的，在AppleTV上设置DNS为117.41.182.103，这样的话http服务器地址必须是 192.168.1.9。</p>

<ol>
<li><p>搭建HTTP服务，确保 http://192.168.1.9 能访问；HTTP 弄好后，需要开启文件列表功能（dir listing），这样我们才能以让ATV把上面的媒体文件列出来播放。
1). Tomato 能用的lighttpd精简版可以从我这里自行提取：http://hdweb.googlecode.com/svn/ROUTER，已开启dir listing）
2). My Book Live 开启dir listing，参考TT的帖子：http://bbs.weiphone.com/read-htm-tid-5484774.html，其实可以改进一下，编辑 wdnas文件，里面var/www的-Indexes前面的减号去掉，全局都支持dir listing了，不用创建.htaccess文件了。
3). 其他NAS请自行想办法搭建http服务器。</p></li>
<li><p>把附件下载下来，解压放到http服务器根目录下（注意是http://192.168.1.9/api-video，目录不要多了，也不要少了）。源代码在 https://github.com/Yonsm/ATVME 上，需要尝鲜的可以去哪里随时看看有什么更新。</p></li>
<li><p>修改里面的index.xml文件，指向把url指向你的媒体文件的http url（能列出你的媒体文件的），目前index.xml是TAB页面，有5个版面：照片、视频、音乐、下载、设置。如果你也正好用我的文件路径（比如/media/Pictures）那就不用改了。注意每个URL最后的“/”是必须的，不要省略。</p></li>
<li><p>打开ATV，看看 WSJ Live，把你的文件都列出来了。</p></li>
</ol>


<p>0). 常规使用：视频、音乐直接点击播放，照片文件夹则以平铺方式呈现，支持幻灯片显示，非常完美。
1). 支持缩略图：如果有“文件或文件夹名称.thumb.jpg”（或“.thumb.文件或文件夹名称.jpg”）存在，则会自动用作缩略图。
2). 外挂SRT字幕：如果有“文件名.srt”存在（注意扩展名也需要，如“A.mp4.srt”），则会显示外挂字幕。
3). 支持连续播放：播放视频和音乐时如果按播放键（Play），完成后会自动播放下一个；如果按选择键（Select/Enter），则播放完成后不会自动播放下一个。
4). 显示简要信息：播放过程中按向上方向键两次，则会显示URL信息和播放列表剩余的项目数。（BTW：播放过程中按向下一次可以分段Seek，ATV内置的功能）。</p>

<p>更新历史：
  1.0  第一个实现版本。
  1.2  支持SRT外挂字幕和连续播放。
  1.3  支持文件夹优先显示；缩略图url不再要求前置。
  2.0 支持TT的MKV播放方案，支持自动生成缩略图（需要ffmpeg最新版，需要开启任意目录cgi支持，步骤稍复杂，教程后面再整理），代码在SVN上。</p>

<p>持续更新中，详细步骤和说明请移步看2楼的详细帖子。：http://bbs.weiphone.com/read-htm-tid-5460032.html</p>

<p>MKV方案请看TT的论坛：http://www.ottnt.com/forum.php</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>PPC 中打开通话记录</title>
      <link href="http://kuanghy.github.io/open-call-log-in-ppc/"/>
      <pubDate>2009-04-03T13:41:28+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/open-call-log-in-ppc</guid>
      <content:encoded><![CDATA[<p>SP 中有一个exe用来打开通话记录，万恶的WM竟然弄得PPC上不一样。经分析找到一个简洁的方法，可以在PPC中打开通话记录界面，代码如下：</p>

<p>if (HWND hWnd = FindWindow(TEXT("MSCProg"), NULL))<br/>
{<br/>
 PostMessage(hWnd, 0x801A, 0, 0);<br/>
}</p>

<!-- more -->


<p></p>

<p>又他妈的是私有的消息，做出这么垃圾的系统垃圾的设计，WM 的设计者真该去S!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>换用杭州联通宽带快一个月了</title>
      <link href="http://kuanghy.github.io/using-china-unicom-network-for-a-month/"/>
      <pubDate>2009-04-02T13:58:15+08:00</pubDate>
      <author>Huoty</author>
      <guid>http://kuanghy.github.io/using-china-unicom-network-for-a-month</guid>
      <content:encoded><![CDATA[<p>以前用电信ADSL将近7年了，一直听说“网通”没电信的ADSL好。今年过了年来了之后，本想继续包2年ADSL，到要确认的时候竟然又出霸王条款，无语的细节就不说了<!-- more -->（TIA! 有些事情想不通的时候，想想这时天朝 ，就想通了——This Is China!）</p>

<p>一不小心看到小区内的广告，“原中国网通”“现联通宽带”促销云云，打电话到10010竟然说可能是下面搞得活动，不清楚。后来谨慎确认了一下，确有其事，于是装了，980 元 = 2M ADSL 14个月+ 150购物卡 + 送一个联通的卡（可用一年不用充值，但没对我没啥用反正）。火星了一把的是，杭州网通竟然不是常规意义上的“网通”，跟中国网通不搭噶的东西，还好中国网通现在也并入联通了，以后就说联通宽带吧。</p>

<p>换用杭州联通宽带快一个月了，基本感觉满意。下载速度基本能保证180-200K（迅雷，修在MS网站上的东西速度220K），就是访问一些电信的网站好不到哪里去，到某些电信服务器的响应速度比较慢，据说游戏的也会有点卡的，反正不玩游戏，下载速度才是王道。</p>

<p>另外，从服务来说，联通也够乱的，就这情形，估计就是给了WCDMA的牌照，也好不到哪里去。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
